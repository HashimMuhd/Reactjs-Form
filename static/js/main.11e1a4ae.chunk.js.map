{"version":3,"sources":["components/SimpleForm.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleForm","formik","useFormik","initialValues","name","email","password","onSubmit","values","console","log","validate","errors","test","handleSubmit","className","htmlFor","type","id","onChange","handleChange","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAuEeA,MApEf,WAEI,IAAMC,EAASC,YAAU,CACrBC,cAAe,CACXC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEdC,SAAU,SAAAC,GACNC,QAAQC,IAAI,YAAaT,EAAOO,SAEpCG,SAAU,SAAAH,GACN,IAAII,EAAS,GAgBb,OAdIJ,EAAOJ,OACPQ,EAAOR,KAAK,YAGZI,EAAOH,MAED,4CAA4CQ,KAAKL,EAAOH,SAC5DO,EAAOP,MAAQ,wBAFjBO,EAAOP,MAAM,WAKbG,EAAOF,WACPM,EAAON,SAAS,YAGbM,KAOf,OAJAH,QAAQC,IAAI,cAAeT,EAAOW,QAK9B,8BACI,uBAAML,SAAUN,EAAOa,aAAvB,UACI,sBAAKC,UAAU,eAAf,UACA,uBAAOC,QAAQ,OAAf,kBACA,uBAAOC,KAAK,OAAOC,GAAG,OAAOd,KAAK,OAAOe,SAAUlB,EAAOmB,aAAcC,MAAOpB,EAAOO,OAAOJ,OAC5FH,EAAOW,OAAOR,KACf,qBAAKW,UAAU,QAAf,SAAwBd,EAAOW,OAAOR,OACjC,QAGL,sBAAKW,UAAU,eAAf,UACA,uBAAOC,QAAQ,QAAf,oBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQd,KAAK,QAAQe,SAAUlB,EAAOmB,aAAcC,MAAOpB,EAAOO,OAAOH,QAC/FJ,EAAOW,OAAOP,MACf,qBAAKU,UAAU,QAAf,SAAwBd,EAAOW,OAAOP,QACjC,QAGL,sBAAKU,UAAU,eAAf,UACA,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,KAAK,OAAOC,GAAG,WAAWd,KAAK,WAAWe,SAAUlB,EAAOmB,aAAcC,MAAOpB,EAAOO,OAAOF,WACpGL,EAAOW,OAAON,SACf,qBAAKS,UAAU,QAAf,SAAwBd,EAAOW,OAAON,WAClC,QAGJ,wBAAQW,KAAK,SAAb,0BCrDDK,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACK,cAAC,EAAD,OCKMQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.11e1a4ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useFormik } from 'formik';\r\n\r\nfunction SimpleForm() {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\"\r\n        },\r\n        onSubmit: values =>{\r\n            console.log('Form Data', formik.values)\r\n        },\r\n        validate: values =>{\r\n            let errors = {}\r\n\r\n            if(!values.name){\r\n                errors.name='Required'\r\n            }\r\n\r\n            if(!values.email){\r\n                errors.email='Required'\r\n            }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                  errors.email = \"Invalid email format\"\r\n            }\r\n\r\n            if(!values.password){\r\n                errors.password='Required'\r\n            }\r\n\r\n            return errors\r\n        } \r\n    })\r\n    console.log('Form Errors', formik.errors)\r\n\r\n    // console.log('Form Values', formik.values)\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className=\"form-control\"> \r\n                <label htmlFor='name'>Name</label>\r\n                <input type='text' id='name' name='name' onChange={formik.handleChange} value={formik.values.name} />\r\n                {formik.errors.name ? (\r\n                <div className=\"error\">{formik.errors.name}</div>\r\n                 ) : null}\r\n                </div>\r\n\r\n                <div className=\"form-control\">\r\n                <label htmlFor='email'>E-mail</label>\r\n                <input type='email' id='email' name='email' onChange={formik.handleChange} value={formik.values.email} />\r\n                {formik.errors.email ? (\r\n                <div className=\"error\">{formik.errors.email}</div>\r\n                 ) : null}\r\n                </div>\r\n\r\n                <div className=\"form-control\">\r\n                <label htmlFor='password'>Password</label>\r\n                <input type='text' id='password' name='password' onChange={formik.handleChange} value={formik.values.password} />\r\n                {formik.errors.password ? (\r\n                <div className=\"error\">{formik.errors.password}</div>\r\n                ) : null}\r\n                </div>\r\n\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SimpleForm\r\n","import React from 'react'\nimport \"./App.css\";\nimport SimpleForm from './components/SimpleForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <SimpleForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}